//script5352(5352)(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9)(void)
int ivar10;
int ivar11;
int ivar12;
int ivar13;
int ivar14;
int ivar15;
int ivar16;
int ivar17;
int ivar18;
int ivar19;
int ivar20;
int ivar21;
string svar0;
string svar1;
ivar10 = -1;
ivar11 = -1;
ivar12 = 0;
ivar13 = -1;
ivar14 = 0;
ivar15 = 0;
ivar16 = 0;
ivar17 = 0;
while (ivar16 < 6) {
	switch (ivar16) {
		case 0:
			ivar10 = 5182;
			break;
		case 1:
			ivar10 = 3875;
			break;
		case 2:
			if (gender() == 0) 
				ivar10 = 5189;
			else 
				ivar10 = 5188;
			break;
		case 3:
			ivar10 = 5184;
			break;
		case 4:
			ivar10 = 5183;
			break;
		case 5:
			ivar10 = 5724;
	}
	ivar14 = 0;
	while (ivar14 < enum_getoutputcount(ivar10)) {
		ivar11 = enum(ivar14, ivar10, 74, 105);
		if (struct_param(ivar11, 1933) > 0) 
			ivar15 = calc(ivar15 + 1);
		ivar14 = calc(ivar14 + 1);
	}
	ivar16 = calc(ivar16 + 1);
}
if (ivar15 < 1) 
	/* 
		AT PrimitiveInstruction(opcode=184, value=0, type=int)
		java.lang.RuntimeException: can't merge: diff stack sizes/types, -5, 0, 0, true
			at com.cryo.cache.loaders.cs2.CS2Type.merge(CS2Type.java:526)
			at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.processFlowBlock(CS2FlowGenerator.java:446)
			at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.processGeneration(CS2FlowGenerator.java:99)
			at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.generate(CS2FlowGenerator.java:82)
			at com.cryo.cache.loaders.cs2.CS2Script.decompile(CS2Script.java:357)
			at com.cryo.cache.loaders.CS2DefinitionDumper.dumpFiles(CS2DefinitionDumper.java:43)
			at com.cryo.cache.CacheBuilder.dumpCache(CacheBuilder.java:72)
			at com.cryo.cache.CacheBuilder.main(CacheBuilder.java:43)
		
	 */
globalarray_0 = new struct[ivar15];
ivar17 = calc(1 - ivar15);
ivar16 = 0;
while (ivar16 < 6) {
	switch (ivar16) {
		case 0:
			ivar10 = 5182;
			break;
		case 1:
			ivar10 = 3875;
			break;
		case 2:
			if (gender() == 0) 
				ivar10 = 5189;
			else 
				ivar10 = 5188;
			break;
		case 3:
			ivar10 = 5184;
			break;
		case 4:
			ivar10 = 5183;
			break;
		case 5:
			ivar10 = 5724;
	}
	ivar14 = 0;
	while (ivar14 < enum_getoutputcount(ivar10)) {
		ivar11 = enum(ivar14, ivar10, 74, 105);
		if (struct_param(ivar11, 1933) > 0) {
			globalarray_0[ivar17] = ivar11;
			ivar17 = max(calc(1 - ivar17), 0);
		}
		ivar14 = calc(ivar14 + 1);
	}
	ivar16 = calc(ivar16 + 1);
}
ivar14 = 0;
ivar12 = 1;
ivar18 = 0;
ivar19 = 0;
svar0 = "";
svar1 = "";
ivar20 = 0;
ivar21 = 0;
switch (load_varc(1659)) {
	while (1) {
		default:
			if (ivar12 == 1) {
				ivar12 = 0;
				ivar14 = calc(1 - ivar15);
				while (ivar14 > 0) {
					if (struct_param(globalarray_0[ivar14], 1933) > 0) 
						ivar18 = struct_param(globalarray_0[ivar14], 1933);
					else 
						ivar18 = struct_param(globalarray_0[ivar14], 1932);
					if (struct_param(globalarray_0[calc(1 - ivar14)], 1933) > 0) 
						ivar19 = struct_param(globalarray_0[calc(1 - ivar14)], 1933);
					else 
						ivar19 = struct_param(globalarray_0[calc(1 - ivar14)], 1932);
					if (ivar18 < ivar19) {
						ivar12 = 1;
						ivar13 = globalarray_0[calc(1 - ivar14)];
						globalarray_0[calc(1 - ivar14)] = globalarray_0[ivar14];
						globalarray_0[ivar14] = ivar13;
					}
					ivar14 = calc(1 - ivar14);
				}
			}
	}
	flow_54:
		GOTO	flow_132
		while (1) {
			case 1:
				if (ivar12 == 1) {
					ivar12 = 0;
					ivar14 = calc(1 - ivar15);
					while (ivar14 > 0) {
						if (struct_param(globalarray_0[ivar14], 1933) > 0) 
							ivar18 = struct_param(globalarray_0[ivar14], 1933);
						else 
							ivar18 = struct_param(globalarray_0[ivar14], 1932);
						if (struct_param(globalarray_0[calc(1 - ivar14)], 1933) > 0) 
							ivar19 = struct_param(globalarray_0[calc(1 - ivar14)], 1933);
						else 
							ivar19 = struct_param(globalarray_0[calc(1 - ivar14)], 1932);
						if (ivar18 > ivar19) {
							ivar12 = 1;
							ivar13 = globalarray_0[calc(1 - ivar14)];
							globalarray_0[calc(1 - ivar14)] = globalarray_0[ivar14];
							globalarray_0[ivar14] = ivar13;
						}
						ivar14 = calc(1 - ivar14);
					}
				}
		}
	flow_68:
		GOTO	flow_132
		while (1) {
			case 2:
				if (ivar12 == 1) {
					ivar12 = 0;
					ivar14 = calc(1 - ivar15);
					while (ivar14 > 0) {
						if (struct_param(globalarray_0[ivar14], 1937) == 4) {
							ivar20 = 0;
							ivar21 = 0;
							while (ivar20 < enum_getoutputcount(5184) && ivar21 == 0) {
								if (enum(ivar20, 5184, 74, 105) == globalarray_0[ivar14]) {
									if (gender() == 0) 
										svar0 = enum(ivar20, 5186, 115, 105);
									else 
										svar0 = enum(ivar20, 5187, 115, 105);
									ivar21 = 1;
								}
								ivar20 = calc(ivar20 + 1);
							}
						}
						else 
							svar0 = struct_param(globalarray_0[ivar14], 1930);
						if (struct_param(globalarray_0[calc(1 - ivar14)], 1937) == 4) {
							ivar20 = 0;
							ivar21 = 0;
							while (ivar20 < enum_getoutputcount(5184) && ivar21 == 0) {
								if (enum(ivar20, 5184, 74, 105) == globalarray_0[calc(1 - ivar14)]) {
									if (gender() == 0) 
										svar1 = enum(ivar20, 5186, 115, 105);
									else 
										svar1 = enum(ivar20, 5187, 115, 105);
									ivar21 = 1;
								}
								ivar20 = calc(ivar20 + 1);
							}
						}
						else 
							svar1 = struct_param(globalarray_0[calc(1 - ivar14)], 1930);
						if (compare(svar0, svar1) < 0) {
							ivar12 = 1;
							ivar13 = globalarray_0[calc(1 - ivar14)];
							globalarray_0[calc(1 - ivar14)] = globalarray_0[ivar14];
							globalarray_0[ivar14] = ivar13;
						}
						ivar14 = calc(1 - ivar14);
					}
				}
		}
	flow_100:
		GOTO	flow_132
		while (1) {
			case 3:
				if (ivar12 == 1) {
					ivar12 = 0;
					ivar14 = calc(1 - ivar15);
					while (ivar14 > 0) {
						if (struct_param(globalarray_0[ivar14], 1937) == 4) {
							ivar20 = 0;
							ivar21 = 0;
							while (ivar20 < enum_getoutputcount(5184) && ivar21 == 0) {
								if (enum(ivar20, 5184, 74, 105) == globalarray_0[ivar14]) {
									if (gender() == 0) 
										svar0 = enum(ivar20, 5186, 115, 105);
									else 
										svar0 = enum(ivar20, 5187, 115, 105);
									ivar21 = 1;
								}
								ivar20 = calc(ivar20 + 1);
							}
						}
						else 
							svar0 = struct_param(globalarray_0[ivar14], 1930);
						if (struct_param(globalarray_0[calc(1 - ivar14)], 1937) == 4) {
							ivar20 = 0;
							ivar21 = 0;
							while (ivar20 < enum_getoutputcount(5184) && ivar21 == 0) {
								if (enum(ivar20, 5184, 74, 105) == globalarray_0[calc(1 - ivar14)]) {
									if (gender() == 0) 
										svar1 = enum(ivar20, 5186, 115, 105);
									else 
										svar1 = enum(ivar20, 5187, 115, 105);
									ivar21 = 1;
								}
								ivar20 = calc(ivar20 + 1);
							}
						}
						else 
							svar1 = struct_param(globalarray_0[calc(1 - ivar14)], 1930);
						if (compare(svar0, svar1) > 0) {
							ivar12 = 1;
							ivar13 = globalarray_0[calc(1 - ivar14)];
							globalarray_0[calc(1 - ivar14)] = globalarray_0[ivar14];
							globalarray_0[ivar14] = ivar13;
						}
						ivar14 = calc(1 - ivar14);
					}
				}
		}
}
flow_132:
	ivar14 = 0;
	if (ivar14 < ivar15) {
		ivar11 = globalarray_0[ivar14];
		script5351(ivar11, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
		/* 
			AT PrimitiveInstruction(opcode=168, value=5, type=int)
			java.lang.RuntimeException: Stack underflow
				at com.cryo.cache.loaders.cs2.nodes.CS2Stack.pop(CS2Stack.java:44)
				at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.processFlowBlock(CS2FlowGenerator.java:468)
				at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.processGeneration(CS2FlowGenerator.java:99)
				at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.generate(CS2FlowGenerator.java:82)
				at com.cryo.cache.loaders.cs2.CS2Script.decompile(CS2Script.java:357)
				at com.cryo.cache.loaders.CS2DefinitionDumper.dumpFiles(CS2DefinitionDumper.java:43)
				at com.cryo.cache.CacheBuilder.dumpCache(CacheBuilder.java:72)
				at com.cryo.cache.CacheBuilder.main(CacheBuilder.java:43)
			
		 */
	}
	/* 
		AT PrimitiveInstruction(opcode=184, value=0, type=int)
		java.lang.RuntimeException: can't merge: diff stack sizes/types, -5, 0, 0, true
			at com.cryo.cache.loaders.cs2.CS2Type.merge(CS2Type.java:526)
			at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.processFlowBlock(CS2FlowGenerator.java:446)
			at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.processGeneration(CS2FlowGenerator.java:99)
			at com.cryo.cache.loaders.cs2.flow.CS2FlowGenerator.generate(CS2FlowGenerator.java:82)
			at com.cryo.cache.loaders.cs2.CS2Script.decompile(CS2Script.java:357)
			at com.cryo.cache.loaders.CS2DefinitionDumper.dumpFiles(CS2DefinitionDumper.java:43)
			at com.cryo.cache.CacheBuilder.dumpCache(CacheBuilder.java:72)
			at com.cryo.cache.CacheBuilder.main(CacheBuilder.java:43)
		
	 */